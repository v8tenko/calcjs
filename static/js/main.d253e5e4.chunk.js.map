{"version":3,"sources":["serviceWorker.ts","types/Operations.ts","features/inputSplice.ts","app/store.ts","app/hooks.ts","components/CalculatorButton/CalculatorButton.tsx","components/CalculatorTop/CalculatorTop.tsx","components/Calculator/Calculator.tsx","App.tsx","index.js"],"names":["Boolean","window","location","hostname","match","Operations","lowPriority","isInLowPriority","x","includes","Operator","value","settings","otherSymbol","divide","subtract","add","multiply","equals","clear","type","y","NaN","r","toFixed","operation","payload","isOperation","test","inputSplit","createSlice","name","initialState","log","input","isNew","reducers","append","state","action","length","slice","commitOperation","logSign","toString","inputSign","lastIndexOf","last","count","split","filter","calculate","actions","added","push","idx","current","len","res","calc","act","call","parse","nextIdx","start","i","undefined","reducer","combineReducers","inputReducer","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","CalculatorButton","id","background","content","onClick","className","style","NumberCalculatorButton","dispatch","parseNumber","OperationCalculatorButton","parseOperation","colorOfType","DotCalculatorButton","CalculatorTop","Calculator","NumberCells","cells","Array","fill","map","_","OperationCells","all","o","App","height","width","display","justifyContent","alignItems","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d253e5e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export enum Operations {\r\n    add, subtract, multiply, divide, equals, clear\r\n}\r\n\r\nexport const highPriority = ['/', '⋅']\r\nexport const lowPriority = ['+', '-']\r\n\r\nexport const isInLowPriority = (x: string) => lowPriority.includes(x)\r\nexport const isInHighPriority = (x: string) => highPriority.includes(x)\r\n\r\nexport class Operator {\r\n\r\n\r\n\r\n    static toString(value: Operations, settings: {otherSymbol: boolean} = {otherSymbol: false}) {\r\n        switch (value) {\r\n            case Operations.divide:\r\n                return '/'\r\n            case Operations.subtract:\r\n                return '-'\r\n            case Operations.add:\r\n                return '+'\r\n            case Operations.multiply:\r\n                return settings?.otherSymbol ? 'x' : '⋅'\r\n            case Operations.equals:\r\n                return '='\r\n            case Operations.clear:\r\n                return 'AC'\r\n        }\r\n    }\r\n\r\n    static parse(value: string): Operations {\r\n        switch (value) {\r\n            case '+':\r\n                return Operations.add\r\n            case '-':\r\n                return Operations.subtract\r\n            case '/':\r\n                return Operations.divide\r\n            case '⋅':\r\n                return Operations.multiply\r\n            default:\r\n                return Operations.equals\r\n        }\r\n    }\r\n\r\n\r\n    static call(type: Operations | null, x: number, y: number | null): number {\r\n        if (y === null) {\r\n            return NaN\r\n        }\r\n        if (type === null) {\r\n            return y\r\n        }\r\n        let r: number\r\n        switch (type) {\r\n            case Operations.divide:\r\n                r = x / y\r\n                break\r\n            case Operations.subtract:\r\n                r = x - y\r\n                break\r\n            case Operations.add:\r\n                r = x + y\r\n                break\r\n            case Operations.multiply:\r\n                r = x * y\r\n                break\r\n            case Operations.equals:\r\n                r = x\r\n                break\r\n            case Operations.clear:\r\n                r = 0\r\n                break\r\n        }\r\n        return +r.toFixed(10)\r\n    }\r\n\r\n    static all(): Operations[] {\r\n        return [\r\n            Operations.equals, Operations.add, Operations.subtract,\r\n            Operations.divide, Operations.multiply, Operations.clear\r\n        ]\r\n    }\r\n\r\n    static parseNumber(value: number): string {\r\n        switch (value) {\r\n            case 0:\r\n                return 'zero'\r\n            case 1:\r\n                return 'one'\r\n            case 2:\r\n                return 'two'\r\n            case 3:\r\n                return 'three'\r\n            case 4:\r\n                return 'four'\r\n            case 5:\r\n                return 'five'\r\n            case 6:\r\n                return 'six'\r\n            case 7:\r\n                return 'seven'\r\n            case 8:\r\n                return 'eight'\r\n            case 9:\r\n                return 'nine'\r\n            default:\r\n                return 'NaN'\r\n        }\r\n    }\r\n\r\n    static parseOperation(operation: Operations): string {\r\n        switch (operation) {\r\n            case Operations.add:\r\n                return 'add'\r\n            case Operations.divide:\r\n                return 'divide'\r\n            case Operations.equals:\r\n                return 'equals'\r\n            case Operations.multiply:\r\n                return 'multiply'\r\n            case Operations.subtract:\r\n                return 'subtract'\r\n            case Operations.clear:\r\n                return 'clear'\r\n            default:\r\n                return 'null'\r\n        }\r\n    }\r\n\r\n    static isMath(payload: Operations) {\r\n        return [Operations.multiply, Operations.add, Operations.subtract, Operations.divide].includes(payload)\r\n    }\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Operations, Operator, isInLowPriority} from \"../types/Operations\";\r\n\r\nexport interface InputState {\r\n    log: string,\r\n    input: string,\r\n    isNew: boolean\r\n}\r\n\r\nexport const initialState: InputState = {\r\n    log: '0',\r\n    input: '0',\r\n    isNew: true\r\n}\r\n\r\nconst isOperation = (x: string) => /([+\\-⋅/])/.test(x)\r\n\r\nconst inputSplit = createSlice({\r\n    name: 'input',\r\n    initialState,\r\n    reducers: {\r\n        append(state, action: PayloadAction<string>) {\r\n            if (state.input.length === 1 && !/[0-9]/.test(state.input)) {\r\n                state.input = ''\r\n            }\r\n            if (state.input.slice(-1) === '0' && action.payload === '0') {\r\n                state.isNew = false\r\n                return\r\n            }\r\n            if (state.log.includes('=')) {\r\n                state.log = '0'\r\n                state.input = '0'\r\n                state.isNew = true\r\n            }\r\n            if (state.isNew) {\r\n                state.isNew = false\r\n                if (/[0-9]/.test(action.payload)) {\r\n                    state.input = state.log = action.payload\r\n                    return\r\n                }\r\n            }\r\n            if (action.payload === '.') {\r\n                if (state.input.includes('.')) {\r\n                    return\r\n                }\r\n            }\r\n            state.log += action.payload\r\n            state.input += action.payload\r\n        },\r\n        commitOperation(state, action: PayloadAction<Operations>) {\r\n            const logSign = Operator.toString(action.payload)\r\n            const inputSign = Operator.toString(action.payload, {otherSymbol: true})\r\n            if (state.log.includes('=')) {\r\n                state.log = state.log.slice(state.log.lastIndexOf('=') + 1)\r\n            }\r\n            if (state.isNew) {\r\n                state.input = inputSign\r\n                state.log = logSign\r\n                return\r\n            }\r\n            const last = state.log.slice(-2)\r\n            let count = 0\r\n            if (last.split('').filter(isOperation).length === 2) {\r\n                count = 2\r\n            } else if (isOperation(last.slice(-1))) {\r\n                count = 1\r\n            }\r\n            if (action.payload !== Operations.subtract) {\r\n                if (count) {\r\n                    state.log = state.log.slice(0, -count) + logSign\r\n                } else {\r\n                    state.log += logSign\r\n                }\r\n                state.input = inputSign\r\n            } else {\r\n                if (/([+\\-⋅/])-/.test(last)) {\r\n                    state.log = state.log.slice(0, -2) + logSign\r\n                } else {\r\n                    state.log += logSign\r\n                }\r\n                state.input = inputSign\r\n            }\r\n\r\n        },\r\n        calculate(state) {\r\n            if (['/', '⋅'].includes(state.log[0])) {\r\n                return\r\n            }\r\n            while (isOperation(state.log.slice(-1)[0])) {\r\n                state.log = state.log.slice(0, -1)\r\n            }\r\n            let actions: (number | string)[] = []\r\n            let added = false\r\n            if (state.log[0] !== '+') {\r\n                state.log = '+' + state.log\r\n                actions.push(0)\r\n                added = true\r\n            }\r\n            let idx = 0\r\n            let current = ''\r\n            let len = state.log.length\r\n            while (idx < len) {\r\n                actions.push(state.log[idx])\r\n                current = ''\r\n                idx++\r\n                if (state.log[idx] === '-') {\r\n                    current += '-'\r\n                    idx++\r\n                }\r\n                while (idx < len && !isOperation(state.log[idx])) {\r\n                    current += state.log[idx]\r\n                    idx++\r\n                }\r\n                current && actions.push(+current)\r\n            }\r\n            const calc = (act: (number | string)[]): number => {\r\n                if (act.length === 3) {\r\n                    return Operator.call(\r\n                        Operator.parse(act[1] as string),\r\n                        act[0] as number, act[2] as number\r\n                    )\r\n                }\r\n                let start = isInLowPriority(act[1] as string) ? +act[2] : +act[0]\r\n                let nextIdx\r\n                for (let i = 3; i < act.length; i += 2) {\r\n                    if (isInLowPriority(act[i] as string)) {\r\n                        nextIdx = i\r\n                        break\r\n                    }\r\n                    start = Operator.call(Operator.parse(act[i] as string), start, +act[i + 1])\r\n                }\r\n                if (isInLowPriority(act[1] as string)) {\r\n                    start = Operator.call(Operator.parse(act[1] as string), +act[0], start)\r\n                }\r\n                if (nextIdx === undefined) {\r\n                    return start\r\n                }\r\n                return calc([start, ...act.slice(nextIdx)])\r\n            }\r\n            const res = (+calc(actions).toFixed(5)).toString()\r\n            if (added) {\r\n                state.log = state.log.slice(1)\r\n            }\r\n            state.log += '=' + res\r\n            state.input = res\r\n        }\r\n        ,\r\n        clear(state) {\r\n            state.log = '0'\r\n            state.input = '0'\r\n            state.isNew = true\r\n        }\r\n    }\r\n})\r\n\r\nexport const {append, clear, commitOperation, calculate} = inputSplit.actions\r\nexport default inputSplit.reducer\r\n","import { configureStore, ThunkAction, Action, combineReducers } from '@reduxjs/toolkit';\r\nimport inputReducer from \"../features/inputSplice\";\r\n\r\nexport const reducer = combineReducers({\r\n    input: inputReducer\r\n})\r\n\r\nexport const store = configureStore({ reducer });\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, {FC} from 'react'\r\nimport \"./CalculatorButton.sass\"\r\nimport {append, calculate, clear, commitOperation } from \"../../features/inputSplice\";\r\nimport {useAppDispatch} from \"../../app/hooks\";\r\nimport {Operations, Operator} from \"../../types/Operations\";\r\n\r\nexport interface CalculatorButtonProps {\r\n    id: string,\r\n    background?: string,\r\n    content: any,\r\n    onClick: () => void\r\n}\r\n\r\nconst CalculatorButton: FC<CalculatorButtonProps>\r\n    = ({\r\n           id,\r\n           background = '#4d4d4d',\r\n           content,\r\n           onClick,\r\n       }) => {\r\n    return (\r\n        <div\r\n            id={id}\r\n            className=\"calculator-button\"\r\n            onClick={onClick}\r\n            style={{\r\n                background\r\n            }}>\r\n            <p> {content} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const NumberCalculatorButton: FC<{ value: number }> = ({value}) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const appendAction = () => dispatch(append(`${value}`))\r\n\r\n    return (\r\n        <CalculatorButton\r\n            id={Operator.parseNumber(value)}\r\n            content={value}\r\n            onClick={appendAction}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport const OperationCalculatorButton: FC<{ type: Operations }> = ({type}) => {\r\n    const dispatch = useAppDispatch()\r\n    const appendOperation = () => {\r\n        if (type === Operations.equals) {\r\n            dispatch(calculate())\r\n        } else if (type === Operations.clear) {\r\n            dispatch(clear())\r\n        } else {\r\n            dispatch(commitOperation(type))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CalculatorButton\r\n            id={Operator.parseOperation(type)}\r\n            content={Operator.toString(type, {otherSymbol: true})}\r\n            onClick={appendOperation}\r\n            background={colorOfType(type)}\r\n        />\r\n    )\r\n}\r\n\r\nexport const DotCalculatorButton: FC = () => {\r\n    const dispatch = useAppDispatch()\r\n    const makeDouble = () => dispatch(append('.'))\r\n\r\n    return (\r\n        <CalculatorButton\r\n            id=\"decimal\"\r\n            content={'.'}\r\n            onClick={makeDouble}\r\n        />\r\n    )\r\n}\r\n\r\nfunction colorOfType(type: Operations | null = null): string {\r\n    switch (type) {\r\n        case Operations.clear:\r\n            return '#ac3939'\r\n        case Operations.equals:\r\n            return '#004466'\r\n        default:\r\n            return '#666666'\r\n    }\r\n}\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport \"./CalculatorTop.sass\"\r\nimport {useAppSelector} from \"../../app/hooks\";\r\n\r\nconst CalculatorTop: FC = () => {\r\n\r\n    const {log, input} = useAppSelector(state => state.input)\r\n\r\n    return (\r\n        <div id=\"calculator-top\">\r\n            <p> {log || 0} </p>\r\n            <p id=\"display\"> {input || 0} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorTop\r\n","import React, {FC} from \"react\";\r\nimport \"./Calculator.sass\"\r\nimport {\r\n    DotCalculatorButton,\r\n    NumberCalculatorButton,\r\n    OperationCalculatorButton\r\n} from \"../CalculatorButton/CalculatorButton\";\r\nimport {Operator} from \"../../types/Operations\";\r\nimport CalculatorTop from \"../CalculatorTop/CalculatorTop\";\r\n\r\n\r\nconst Calculator: FC = () => {\r\n\r\n    const NumberCells: FC = () => {\r\n        const cells = new Array(10)\r\n            .fill(0)\r\n            .map((_, i) => <NumberCalculatorButton key={i} value={i} />)\r\n        return <> {cells} </>\r\n    }\r\n\r\n    const OperationCells: FC = () => {\r\n        const cells = Operator.all()\r\n            .map(o => <OperationCalculatorButton key={o} type={o} />)\r\n        return <> {cells} </>\r\n    }\r\n\r\n    return (\r\n        <div id=\"calculator\">\r\n            <CalculatorTop />\r\n            <div id=\"calculator-buttons\">\r\n                <NumberCells />\r\n                <OperationCells />\r\n                <DotCalculatorButton />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Calculator from \"./components/Calculator/Calculator\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div style={{\r\n            height: '100vh',\r\n            width: '100vw',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }}>\r\n            <div style={{\r\n                height: 500,\r\n                width: 400\r\n            }}>\r\n                <Calculator />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}